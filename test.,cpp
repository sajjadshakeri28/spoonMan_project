#include <iostream>
#include <conio.h> // for getch()
#include <cstdlib> // for system("cls")
#include <ctime>   // for random generation
#include <vector>  // for managing bombs
#include <windows.h> // for set color

using namespace std;

const int MAP_SIZE = 25; // Map size
char gameMap[MAP_SIZE][MAP_SIZE]; // Game map
int playerX = 0, playerY = 0;     // Player position
bool gateVisible = false;         // Is the gate visible?
int difficulty = 1;
int moves = 0 , bombsUsed = 0;
clock_t startTime;

struct Bomb {
    int x, y;   // Bomb position
    int timer;  // Countdown timer
};

vector<Bomb> bombs; // List of active bombs

void setColor(int color)
{
   SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);
}

// Function declarations
void mainMenu();
void startGame();
void initializeMap();
void setDifficulty();
void printMap();
void movePlayer(char input);
void placeBomb();
void updateBombs();
void explodeBomb(int index);
void checkEnemies(); // Check if all enemies are destroyed
void showGate();      // Show the gate
void checkGameEnd();  // Check if the game ends
double calculateScore();

int main() {
    mainMenu();
    setDifficulty();
    calculateScore();
    return 0;
}

// Main menu
void mainMenu() {
    int choice;
    do {
        cout << "======== SpoonMan ========" << endl;
        cout << "1. Start Game" << endl;
        cout << "2. Load Game" << endl;
        cout << "3. Difficulty" << endl;
        cout << "4. Help" << endl;
        cout << "5. High Scores" << endl;
        cout << "6. Exit" << endl;
        cout << "==========================" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        system("cls"); // Clear screen
        switch (choice) {
            case 1:
                startGame();
                break;
            case 2:
                cout << "Loading game..." << endl;
                break;
            case 3:
                cout << "Setting difficulty..." << endl;
                setDifficulty();
                break;
            case 4:
                cout << "Help: Your goal is to defeat all enemies and exit the map." << endl;
                break;
            case 5:
                cout << "High Scores: (Not implemented yet)" << endl;
                break;
            case 6:
                cout << "Exiting game..." << endl;
                break;
            default:
                cout << "Invalid choice! Try again." << endl;
        }
    } while (choice != 6);
}


// Start the game
void startGame() {
    startTime = clock();
    moves = 0;
    bombsUsed = 0;
    initializeMap();  // Initialize map
    char input;
    while (true) {
        system("cls"); // Clear screen
        printMap();    // Print the map

        cout << "Controls: W = Up, S = Down, A = Left, D = Right, B = Place Bomb, Q = Quit" << endl;
        cout << "Enter your move: ";
        input = getch(); // Get user input

        if (input == 'q' || input == 'Q') { // Quit game
            cout << "Returning to main menu..." << endl;
            break;
        } else if (input == 'b' || input == 'B') { // Place bomb
            placeBomb();
        } else {
            movePlayer(input); // Move player
        }

        updateBombs();  // Update bomb timers and explosions
        checkEnemies(); // Check if enemies are destroyed
        checkGameEnd(); // Check if player reached the gate
    }
}

// Initialize the map
void initializeMap() {
    srand(time(0)); // Seed for random generation
    int brickwallRate, enemyRate;

    if(difficulty == 1)
    {
        brickwallRate = 18;
        enemyRate = 20 ;
    }
    else if(difficulty == 2)
    {
        brickwallRate = 13;
        enemyRate = 10;
    }
    else{
        brickwallRate = 8;
        enemyRate = 5;
    }
    gateVisible = false; // Reset the gate visibility
    for (int i = 0; i < MAP_SIZE; i++) {
        for (int j = 0; j < MAP_SIZE; j++) {
            if (i == 0 || i == MAP_SIZE - 1 ||  j == 0 || j == MAP_SIZE - 1) {
                gameMap[i][j] = '*'; // Border
            } else if (( i ) % 2 == 0 && ( j ) % 2 == 0) {
                gameMap[i][j] = 'X'; // Concrete wall
            } else if ((rand() % brickwallRate) == 0) {
                gameMap[i][j] = '-'; // Brick wall
            } else if ((rand() % enemyRate) == 0) {
                gameMap[i][j] = 'E'; // Enemy
            } else {
                gameMap[i][j] = ' '; // Empty space
            }
        }
    }
    // Set initial player position
    playerX = 1;
    playerY = 1;
    gameMap[playerX][playerY] = 'S'; // Player
}

// Print the map
void printMap() {
    for (int i = 0; i < MAP_SIZE; i++) {
        for (int j = 0; j < MAP_SIZE; j++) {

            switch(gameMap[i][j])
            {
                case 'S':
                    setColor(10);
                    break;
                case 'E':
                    setColor(12);
                    break;
                case 'X':
                    setColor(8);
                    break;
                case '-':
                    setColor(6);
                    break;
                case 'B':
                    setColor(14);
                    break;
                case '#':
                    setColor(9);
                    break;
                default:
                    setColor(15);
                    break;

            }
            cout << gameMap[i][j] << " ";
        }
        cout << endl;
    }
}
// Move the player
void setDifficulty()
{
    cout << "Choose the degree of difficulty:" << endl;
    cout << "1.easy\n2.average\n3.hard" << endl;
    cin >> difficulty;
}
double calculateScore()
{
    double timeElapsed = double(clock() - startTime) / CLOCKS_PER_SEC;
    int score = 1000 / (1 + (timeElapsed * 2) + (moves * 5) + (bombsUsed * 10));

    if(difficulty == 2)
    {
        score *= 1.2;
    }
    if(difficulty == 3)
    {
        score *= 1.3;
    }

    return score;
}
void movePlayer(char input) {
    int newX = playerX, newY = playerY;

    switch (input) {
        case 'w': case 'W': newX--; break;
        case 's': case 'S': newX++; break;
        case 'a': case 'A': newY--; break;
        case 'd': case 'D': newY++; break;
        default: cout << "Invalid move!" << endl; return;
    }

    if (gameMap[newX][newY] == '*' || gameMap[newX][newY] == 'X' || gameMap[newX][newY] == '-') {
        cout << "You hit a wall!" << endl;
        return;
    }

    if (gameMap[newX][newY] == 'E') { // Player collided with an enemy
        system("cls");
        cout << "Lose Game! You were caught by an enemy." << endl;
        exit(0); // End the game
    }

    gameMap[playerX][playerY] = ' '; // Clear previous position
    playerX = newX;
    playerY = newY;
    gameMap[playerX][playerY] = 'S'; // Set new position
    moves++;
}

// Place a bomb
void placeBomb() {
    Bomb bomb = {playerX, playerY, 3}; // Bomb with a 3-turn timer
    bombs.push_back(bomb);
    gameMap[playerX][playerY] = 'B'; // Display bomb on the map
    cout << "Bomb placed!" << endl;
    bombsUsed++;
}

// Update bombs
void updateBombs() {
    for (int i = 0; i < bombs.size(); i++) {
        bombs[i].timer--; // Decrease timer

        if (bombs[i].timer == 0) {
            explodeBomb(i); // Explode the bomb
            bombs.erase(bombs.begin() + i); // Remove bomb from the list
            i--; // Adjust index after removal
        }
    }
}

// Explode a bomb
void explodeBomb(int index) {
    int x = bombs[index].x;
    int y = bombs[index].y;

    gameMap[x][y] = ' '; // Clear bomb position

    // Explode in all four directions
    for (int i = 1; i <= 1; i++) { // Explosion radius = 1
        if (gameMap[x - i][y] != 'X' && gameMap[x - i][y] != '*') gameMap[x - i][y] = ' '; // Up
        if (gameMap[x + i][y] != 'X' && gameMap[x + i][y] != '*') gameMap[x + i][y] = ' '; // Down
        if (gameMap[x][y - i] != 'X' && gameMap[x][y - i] != '*') gameMap[x][y - i] = ' '; // Left
        if (gameMap[x][y + i] != 'X' && gameMap[x][y + i] != '*') gameMap[x][y + i] = ' '; // Right
    }

    cout << "Boom! Bomb exploded at (" << x << ", " << y << ")." << endl;
}

// Check if all enemies are destroyed
void checkEnemies() {
    for (int i = 0; i < MAP_SIZE; i++) {
        for (int j = 0; j < MAP_SIZE; j++) {
            if (gameMap[i][j] == 'E') {
                return; // Enemies still exist
            }
        }
    }
    if (!gateVisible) {
        showGate();
    }
}

// Show the gate
void showGate() {
    gateVisible = true;
    gameMap[MAP_SIZE - 2][MAP_SIZE - 2] = '#'; // Place gate in the bottom-right corner
    cout << "The gate has appeared!" << endl;
}

// Check if the player reached the gate
void checkGameEnd() {
    if (gateVisible && playerX == MAP_SIZE - 2 && playerY == MAP_SIZE - 2) {
        system("cls");
        cout << "Congratulations! You reached the gate and completed the game!" << endl;
        cout << "your Score: "<< calculateScore() << endl;
        exit(0); // End the game
    }
}


// تابع محاسبه امتیاز
double calculateScore() {
    double W_T = 1.0; // وزن زمان بازی
    double W_M = 0.5; // وزن حرکت‌ها
    double W_B = 2.0; // وزن بمب‌ها

    double T = (double)(clock() - startTime) / CLOCKS_PER_SEC; // محاسبه زمان سپری‌شده بر حسب ثانیه
    double M = moves;   // تعداد حرکت‌ها
    double B = bombsUsed; // تعداد بمب‌های استفاده‌شده

    double score = 1000.0 / (1 + (W_T * T) + (W_M * M) + (W_B * B));
    return score;
}

// تابع پایان بازی که امتیاز نهایی را نمایش می‌دهد
void endGame() {
    double finalScore = calculateScore();
    cout << "\nGame Over! Your final score: " << finalScore << endl;
}
